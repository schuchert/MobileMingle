import org.apache.ivy.plugins.resolver.URLResolver

apply plugin: 'java'
apply plugin: 'gae'
apply plugin: 'eclipse'
apply plugin: 'idea'

def compatibilityVersion = 1.6
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

buildscript {
    gitHub = {
        def resolver = new URLResolver()

        resolver.with {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }

        resolver
    }

    repositories {
        add gitHub()
				mavenCentral()
    }

    dependencies {
        classpath 'bmuschko:gradle-gae-plugin:0.5.2'
    }
}

repositories {
    mavenCentral()
    add gitHub()
		mavenRepo name: 'seasar', urls: 'http://maven.seasar.org/maven2'
		mavenRepo name: 'sonatype', urls: 'https://oss.sonatype.org/content/groups/google/'
}

sourceSets {
    main {
        output.classesDir = file('war/WEB-INF/classes')
    }
}

dependencies {
    def gaeVersion = '1.6.1'
    compile "com.google.appengine:appengine-api-1.0-sdk:$gaeVersion",
            "com.google.appengine:appengine-api-labs:$gaeVersion",
            "com.google.appengine:appengine-tools-sdk:$gaeVersion",
						'com.google.code.gson:gson:2.1+',
						'javax.servlet:servlet-api:2.5',
						'org.apache.httpcomponents:httpclient:4.0-alpha4'

    testCompile "com.google.appengine:appengine-api-stubs:$gaeVersion",
                "com.google.appengine:appengine-testing:$gaeVersion",
								'junit:junit:4.8+'
    gaeSdk "com.google.appengine:appengine-java-sdk:$gaeVersion"
}

webAppDirName = file('war')

gae {
    warDir = file('war')
    downloadSdk = true
}

clean.doLast {
     delete sourceSets*.output.classesDir
}

task copyRuntimeLibraries(type: Sync){
    def webAppLibDirName = 'war/WEB-INF/lib'
    description = "Copies runtime libraries to $webAppLibDirName."
    copy{
        from configurations.runtime  
        into webAppLibDirName
    }
}

idea {
    project {
        jdkName = compatibilityVersion

        ipr.withXml { provider ->
            def node = provider.asNode()
        }
    }
}

eclipse {
    project {
        name = 'MobileMingle'
        file {
            whenMerged { project ->
                project.natures << 'com.google.appengine.eclipse.core.gaeNature'
                project.natures << 'com.google.gdt.eclipse.core.webAppNature'
                project.buildCommands << [name: 'com.google.appengine.eclipse.core.enhancerbuilder']
                project.buildCommands << [name: 'com.google.appengine.eclipse.core.projectValidator']
                project.buildCommands << [name: 'com.google.gdt.eclipse.core.webAppProjectValidator']
            }
        }
    }
    classpath {
        file {
            withXml { xml ->
                xml.asNode().classpathentry.find { it.@kind == 'output' && it.@path == 'bin' }.@path = 'war/WEB-INF/classes'
                xml.asNode().appendNode('classpathentry', [kind: 'con', path: 'com.google.appengine.eclipse.core.GAE_CONTAINER'])
                            .appendNode('attributes')
                            .appendNode('attribute', [name: 'org.eclipse.jst.component.nondependency', value: '/war/WEB-INF/lib'])
                xml.asNode().appendNode('classpathentry', [exported: 'true', kind: 'con', path: 'GROOVY_SUPPORT'])
                            .appendNode('attributes')
                            .appendNode('attribute', [name: 'org.eclipse.jst.component.nondependency', value: '/war/WEB-INF/lib'])
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-4'
}

task integrationTests(type: Test) {
	include '**/integration/*.*'
}

test {
	exclude '**/integration/*.*'
}
